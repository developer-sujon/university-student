{"version":3,"file":"static/js/5479.76c544ee.chunk.js","mappings":"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","sources":["layout/PublicNav.jsx","layout/PublicLayout.jsx","redux/services/authService.js","screens/Login.jsx"],"sourcesContent":["//External Lib Import\r\nimport { Container, Navbar } from 'react-bootstrap';\r\nimport { AiOutlineMenuUnfold } from 'react-icons/ai';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Internal Lib Import\r\nimport Logo from '../assets/images/logo.png';\r\n\r\nconst PublicNav = ({ title }) => {\r\n  return (\r\n    <>\r\n      <title>{title}</title>\r\n      <Navbar className=\"fixed-top px-0 shadow-sm \">\r\n        <Container fluid={true}>\r\n          <Navbar.Brand>\r\n            <button className=\"icon-nav m-0 h5 btn btn-link\">\r\n              <AiOutlineMenuUnfold />\r\n            </button>\r\n            <Link to=\"/\">\r\n              <img className=\"nav-logo mx-2\" src={Logo} alt=\"logo\" />\r\n            </Link>\r\n          </Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicNav;\r\n","//Internal Lib Import\r\nimport PublicNav from './PublicNav';\r\n\r\nconst PublicLayout = ({ children, title }) => {\r\n  return (\r\n    <>\r\n      <PublicNav title={title} />\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublicLayout;\r\n","//External import\nimport SessionHelper from '../../helpers/SessionHelper';\nimport { setLogin } from '../slice/authReducer';\nimport { apiService } from './baseQuery';\n\nexport const authService = apiService.injectEndpoints({\n  endpoints: (builder) => ({\n    register: builder.mutation({\n      query: (data) => ({\n        url: 'auth/register',\n        method: 'POST',\n        body: data,\n      }),\n    }),\n    login: builder.mutation({\n      query: (data) => ({\n        url: 'auth/login',\n        method: 'POST',\n        body: data,\n      }),\n\n      async onQueryStarted(arg, { queryFulfilled, dispatch }) {\n        try {\n          const result = await queryFulfilled;\n\n          /*\n           * set token localStorage\n           */\n          dispatch(setLogin(result.data?.data?.accessToken));\n        } catch (err) {\n          console.log(err);\n        }\n      },\n    }),\n    forgotPassword: builder.mutation({\n      query: (data) => ({\n        url: 'auth/forgotPassword',\n        method: 'POST',\n        body: data,\n      }),\n    }),\n    verifyEmail: builder.mutation({\n      query: ({ email, otp }) => ({\n        url: `auth/verifyEmail?otp=${otp}`,\n        method: 'POST',\n        body: {\n          email,\n        },\n      }),\n    }),\n    resetPassword: builder.mutation({\n      query: ({ password, email, otp }) => ({\n        url: `auth/resetPassword?otp=${otp}`,\n        method: 'POST',\n        body: {\n          password,\n          email,\n        },\n      }),\n      async onQueryStarted(arg, { queryFulfilled, dispatch }) {\n        try {\n          const result = await queryFulfilled;\n          SessionHelper.ResetOtp();\n        } catch (err) {\n          console.log(err);\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  useLoginMutation,\n  useRegisterMutation,\n  useForgotPasswordMutation,\n  useVerifyEmailMutation,\n  useResetPasswordMutation,\n} = authService;\n","//External lib imports\nimport { useEffect } from 'react';\nimport { Card, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\n//Internal lib imports\nimport { useLoginMutation } from '../redux/services/authService';\nimport PublicLayout from '../layout/PublicLayout';\n\nconst Login = () => {\n  const [login, { isLoading }] = useLoginMutation();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const { accessToken } = useSelector((state) => state.authReducer);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      email: 'admin@gmail.com',\n      password: 'pass1234@',\n    },\n    resolver: yupResolver(\n      yup.object({\n        email: yup.string().required(t('email number is required')).email(t('invalid email address')),\n        password: yup.string().required(t('password is required.')).min(8, t('password must be 8 digits long')),\n      })\n    ),\n  });\n\n  /*\n   * form handle submit\n   */\n  const submitForm = (values) => {\n    login(values);\n  };\n\n  useEffect(() => {\n    if (accessToken) {\n      navigate('/');\n    }\n  }, [accessToken]);\n\n  return (\n    <PublicLayout>\n      <div className=\"auth-wrapper mt-5\">\n        <div className=\"auth-content\">\n          <div className=\"auth-wrapper\">\n            <div className=\"auth-content\">\n              <Row className=\"justify-content-center\">\n                <Col xl={8} className=\"center-screen\">\n                  <Card className=\"w-100\">\n                    <Card.Body>\n                      <h5>Sign In</h5>\n                      <br />\n                      <Form onSubmit={handleSubmit(submitForm)} onReset={reset}>\n                        <Form.Group className=\"mb-3\" controlId=\"email\">\n                          <Form.Label>Email</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"email\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.email}\n                                placeholder=\"Email\"\n                                type=\"email\"\n                              />\n                            )}\n                          />\n                          {errors.email && <Form.Text className=\"text-danger\">{errors.email.message}</Form.Text>}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"Password\">\n                          <Form.Label>Password</Form.Label>\n                          <Controller\n                            control={control}\n                            name=\"password\"\n                            render={({ field: { onChange, onBlur, value, ref } }) => (\n                              <Form.Control\n                                onChange={onChange}\n                                value={value}\n                                ref={ref}\n                                isInvalid={errors.password}\n                                placeholder=\"Password\"\n                                type=\"password\"\n                              />\n                            )}\n                          />\n                          {errors.password && <Form.Text className=\"text-danger\">{errors.password.message}</Form.Text>}\n                        </Form.Group>\n                        <div className=\"d-grid\">\n                          <button className=\"btn btn-primary btn-block login-btn mt-2\" type=\"submit\">\n                            {isLoading ? <Spinner size=\"sm\" color=\"light\" /> : t('Sign in')}\n                          </button>\n                        </div>\n                      </Form>\n                      <div className=\"text-center w-100 mt-3\">\n                        <Link className=\"text-center animated fadeInUp\" to=\"/register\">\n                          Sign Up\n                        </Link>\n                        <br />\n                        <Link className=\"text-center animated fadeInUp\" to=\"/forgot-password\">\n                          Forget Password\n                        </Link>\n                      </div>\n                    </Card.Body>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </PublicLayout>\n  );\n};\n\nexport default Login;\n"],"names":["_ref","title","_jsxs","_Fragment","children","_jsx","Navbar","className","Container","fluid","AiOutlineMenuUnfold","Link","to","src","Logo","alt","PublicNav","authService","apiService","endpoints","builder","register","mutation","query","data","url","method","body","login","onQueryStarted","arg","_asyncToGenerator","_regeneratorRuntime","mark","_callee","queryFulfilled","dispatch","_result$data","_result$data$data","result","wrap","_context","prev","next","sent","setLogin","accessToken","t0","console","log","stop","forgotPassword","verifyEmail","_ref2","email","otp","concat","resetPassword","_ref3","password","_ref4","_callee2","_context2","SessionHelper","useLoginMutation","useRegisterMutation","useForgotPasswordMutation","useVerifyEmailMutation","useResetPasswordMutation","_useLoginMutation","_useLoginMutation2","_slicedToArray","isLoading","t","useTranslation","navigate","useNavigate","useSelector","state","authReducer","_useForm","useForm","mode","defaultValues","resolver","yupResolver","yup","required","min","control","handleSubmit","reset","errors","formState","useEffect","PublicLayout","Row","Col","xl","Card","Form","onSubmit","values","onReset","controlId","Controller","name","render","_ref$field","field","onChange","value","onBlur","ref","isInvalid","placeholder","type","message","_ref2$field","Spinner","size","color"],"sourceRoot":""}