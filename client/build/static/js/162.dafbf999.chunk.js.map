{"version":3,"file":"static/js/162.dafbf999.chunk.js","mappings":"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","sources":["redux/services/sessionService.js","screens/private/Admin/CreateUpdateSession.jsx","utils/DateFormatter.jsx"],"sourcesContent":["//Internal Lib Import\nimport { apiService } from './baseQuery';\n\nexport const sessionService = apiService.injectEndpoints({\n  endpoints: (builder) => ({\n    sessionList: builder.query({\n      query: () => ({\n        url: 'session/sessionList',\n        method: 'GET',\n      }),\n    }),\n    sessionCreate: builder.mutation({\n      query: (postBody) => ({\n        url: 'session/sessionCreate',\n        method: 'POST',\n        body: postBody,\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n          dispatch(\n            apiService.util.updateQueryData('sessionList', undefined, (draft) => {\n              draft.data.push(data.data);\n            })\n          );\n          //dispatch(dashboardService.endpoints.dashboardSummary.initiate());\n        } catch {}\n      },\n    }),\n\n    sessionUpdate: builder.mutation({\n      query: ({ id, postBody }) => ({\n        url: `session/sessionUpdate/${id}`,\n        method: 'PATCH',\n        body: postBody,\n      }),\n\n      async onQueryStarted({ id, postBody }, { dispatch, queryFulfilled }) {\n        try {\n          const { data } = await queryFulfilled;\n\n          dispatch(\n            apiService.util.updateQueryData('sessionList', undefined, (draft) => {\n              const findIndex = draft.data.findIndex((role) => role.id === id);\n              draft.data[findIndex].sessionName = data?.data?.sessionName;\n            })\n          );\n\n          //dispatch(dashboardService.endpoints.dashboardSummary.initiate());\n        } catch {\n          //patchsession.undo();\n        }\n      },\n    }),\n    sessionDelete: builder.mutation({\n      query: (id) => ({\n        url: `session/sessionDelete/${id}`,\n        method: 'DELETE',\n      }),\n\n      async onQueryStarted(id, { dispatch, queryFulfilled }) {\n        const patchsession = dispatch(\n          apiService.util.updateQueryData('sessionList', undefined, (draft) => {\n            draft.data = draft.data.filter((role) => role.id !== id);\n          })\n        );\n\n        try {\n          await queryFulfilled;\n        } catch {\n          patchsession.undo();\n        }\n      },\n    }),\n  }),\n});\n\nexport const { useSessionCreateMutation, useSessionListQuery, useSessionUpdateMutation, useSessionDeleteMutation } =\n  sessionService;\n","//External lib imports\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Row, Col, Container, Button, Card, Form, Spinner } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\n//Internal lib imports\nimport Layout from '../../../layout/Layout';\nimport {\n  useSessionCreateMutation,\n  useSessionListQuery,\n  useSessionUpdateMutation,\n} from '../../../redux/services/sessionService';\nimport { formatDate } from '../../../utils/DateFormatter';\n\nconst CreateUpdateSession = () => {\n  let [objectID, SetObjectID] = useState(null);\n  const [details, setDetails] = useState({\n    sessionName: '',\n  });\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { data: allSession } = useSessionListQuery();\n  const [SessionCreate, { isLoading: createLoading, isSuccess: createSuccess }] = useSessionCreateMutation();\n  const [SessionUpdate, { isLoading: updateLoading, isSuccess: updateSuccess }] = useSessionUpdateMutation();\n\n  useEffect(() => {\n    let params = new URLSearchParams(window.location.search);\n    let id = params.get('id');\n    if (id !== null) {\n      SetObjectID(id);\n    }\n\n    if (objectID && allSession) {\n      setDetails(allSession?.data?.find((item) => item.id === objectID));\n    }\n  }, [objectID, allSession]);\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: details,\n    resolver: yupResolver(\n      yup.object({\n        sessionName: yup.string().required(t('session name is required')),\n      })\n    ),\n  });\n\n  useEffect(() => {\n    if (details) {\n      reset(details);\n    }\n  }, [details]);\n\n  /*\n   * form handle submit\n   */\n  const submitForm = ({ sessionName }) => {\n    const postBody = {\n      sessionName,\n    };\n    if (!objectID) {\n      SessionCreate(postBody);\n    } else {\n      SessionUpdate({ id: objectID, postBody });\n    }\n  };\n\n  useEffect(() => {\n    if (createSuccess || updateSuccess) {\n      navigate('/elective-courses');\n    }\n  }, [createSuccess, updateSuccess]);\n\n  return (\n    <Layout>\n      <Container>\n        <Card>\n          <Card.Body>\n            <Row>\n              <h5>{t(`${objectID ? 'update Session' : 'save Session'}`)}</h5>\n              <hr className=\"bg-light\" />\n              <Col>\n                <Form onSubmit={handleSubmit(submitForm)} onReset={reset}>\n                  <Row class>\n                    <Col sm={4}>\n                      <Form.Group className=\"mb-3\" controlId=\"sessionName\">\n                        <Form.Label>{t('session name')}</Form.Label>\n                        <Controller\n                          control={control}\n                          name=\"sessionName\"\n                          render={({ field: { onChange, onBlur, value, ref } }) => (\n                            <Form.Control\n                              onChange={onChange}\n                              defaultValue={value}\n                              ref={ref}\n                              isInvalid={errors.sessionName}\n                              placeholder={t('session name of the session')}\n                              type=\"text\"\n                              size=\"sm\"\n                            />\n                          )}\n                        />\n                        {errors.sessionName && <Form.Text className=\"text-danger\">{errors.sessionName.message}</Form.Text>}\n                      </Form.Group>\n                    </Col>\n                  </Row>\n\n                  <Row>\n                    <Col sm={4}>\n                      <Button size=\"sm\" className=\"mt-2\" type=\"submit\">\n                        {createLoading || updateLoading ? <Spinner size=\"sm\" color=\"light\" /> : t('save change')}\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default CreateUpdateSession;\n","//External Lib Import\nimport React from 'react';\nimport Moment from 'react-moment';\n\nconst DateFormatter = (date) => {\n  return (\n    <>\n      <Moment format=\"D MMM YYYY\" withTitle>\n        {date}\n      </Moment>{' '}\n      <br />\n    </>\n  );\n};\n\nexport const fromNow = (data) => <Moment fromNow>{data}</Moment>;\n\nexport function formatDate(date) {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nexport default DateFormatter;\n"],"names":["sessionService","apiService","endpoints","builder","sessionList","query","url","method","sessionCreate","mutation","postBody","body","onQueryStarted","_","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","queryFulfilled","_yield$queryFulfilled","data","wrap","_context","prev","next","sent","undefined","draft","push","t0","stop","sessionUpdate","_ref2","id","concat","_ref3","_ref4","_callee2","_yield$queryFulfilled2","_context2","_data$data","findIndex","role","sessionName","sessionDelete","_ref5","_callee3","patchsession","_context3","filter","undo","useSessionCreateMutation","useSessionListQuery","useSessionUpdateMutation","useSessionDeleteMutation","_useState","useState","_useState2","_slicedToArray","objectID","SetObjectID","_useState3","_useState4","details","setDetails","t","useTranslation","navigate","useNavigate","allSession","_useSessionCreateMuta","_useSessionCreateMuta2","SessionCreate","_useSessionCreateMuta3","createLoading","isLoading","createSuccess","isSuccess","_useSessionUpdateMuta","_useSessionUpdateMuta2","SessionUpdate","_useSessionUpdateMuta3","updateLoading","updateSuccess","useEffect","_allSession$data","URLSearchParams","window","location","search","get","find","item","_useForm","useForm","mode","defaultValues","resolver","yupResolver","yup","required","control","handleSubmit","reset","errors","watch","setValue","formState","_jsx","Layout","children","Container","Card","_jsxs","Row","className","Col","Form","onSubmit","onReset","class","sm","controlId","Controller","name","render","_ref2$field","field","onChange","value","onBlur","ref","defaultValue","isInvalid","placeholder","type","size","message","Button","Spinner","color","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","_Fragment","Moment","format","withTitle"],"sourceRoot":""}