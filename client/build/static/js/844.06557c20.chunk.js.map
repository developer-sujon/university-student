{"version":3,"file":"static/js/844.06557c20.chunk.js","mappings":"8KAGaA,E,QAAmBC,EAAAA,gBAA2B,CACzDC,UAAW,SAACC,GAAO,MAAM,CACvBC,iBAAkBD,EAAQE,MAAM,CAC9BA,MAAO,iBAAO,CACZC,IAAK,6BACLC,OAAQ,MACT,IAEJ,IAG0CC,GAA6BR,EAA3DS,6BAA2DT,EAA7BQ,0B,mGCV7CE,EAAAA,GAAAA,SAAiBC,EAAAA,GAAYC,EAAAA,EAASC,EAAAA,IAEtC,IAkBA,EAlBoB,SAAHC,GAA8B,IAAxBV,EAAgBU,EAAhBV,iBACbW,GAAMC,EAAAA,EAAAA,MAAND,EAEFE,EAAO,CACXC,QAAMC,EAAAA,EAAAA,GAAsB,OAAhBf,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBgB,KAAI,SAACC,GAAC,OAAKN,EAAEM,EAAEC,IAAI,KACjDC,SAAU,CACR,CACEC,MAAOT,EAAE,mBACTE,MAAIE,EAAAA,EAAAA,GAAsB,OAAhBf,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBgB,KAAI,SAACC,GAAC,OAAKA,EAAEI,KAAK,KAC9CC,gBAAiB,CAAC,UAAW,UAAW,UAAW,WACnDC,YAAa,CAAC,UAAW,UAAW,UAAW,WAC/CC,YAAa,KAInB,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACb,KAAMA,GACpB,EC2DA,EAtEkB,WAChB,IAAAc,EAA4BvB,IAApBS,EAAIc,EAAJd,KAAMe,EAASD,EAATC,UAGR5B,IAFQY,EAAAA,EAAAA,MAAND,GAEqB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAMA,OAAQ,IAEnCgB,EAAU,GAuDd,OApDEA,EADED,GAEAH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAC,UACHN,EAAAA,EAAAA,KAACK,EAAAA,EAAAA,KAAS,CAAAC,UACRN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTN,EAAAA,EAAAA,KAACS,EAAAA,EAAO,CAACC,KAAK,KAAKC,QAAQ,kBAK1BpC,GAAoBA,EAAiBqC,OAAS,GAErDZ,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAP,UACEN,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAC,UACHN,EAAAA,EAAAA,KAACK,EAAAA,EAAAA,KAAS,CAAAC,UACRN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTN,EAAAA,EAAAA,KAACc,EAAW,CAACvC,iBAAkBA,aAQvCyB,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAC,UACHN,EAAAA,EAAAA,KAACK,EAAAA,EAAAA,KAAS,CAAAC,UACRN,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACC,GAAI,EAAEF,UACTN,EAAAA,EAAAA,KAACc,EAAW,CACVvC,iBAAkB,CAChB,CACEkB,IAAK,WACLG,MAAO,GAET,CACEH,IAAK,UACLG,MAAO,GAET,CACEH,IAAK,WACLG,MAAO,GAET,CACEH,IAAK,MACLG,MAAO,aAWrBI,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAAAT,UACLN,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAV,UACRN,EAAAA,EAAAA,KAACiB,EAAAA,EAAG,CAAAX,SAAEF,OAId,C","sources":["redux/services/dashboardService.js","components/StatusChart.jsx","screens/private/Dashboard.jsx"],"sourcesContent":["//Internal Lib Import\nimport { apiService } from './baseQuery';\n\nexport const dashboardService = apiService.injectEndpoints({\n  endpoints: (builder) => ({\n    dashboardSummary: builder.query({\n      query: () => ({\n        url: 'dashboard/dashboardSummary',\n        method: 'GET',\n      }),\n    }),\n  }),\n});\n\nexport const { useLazyDashboardSummaryQuery, useDashboardSummaryQuery } = dashboardService;\n","import React from 'react';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { useTranslation } from 'react-i18next';\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst StatusChart = ({ dashboardSummary }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const data = {\r\n    labels: [...dashboardSummary?.map((i) => t(i._id))],\r\n    datasets: [\r\n      {\r\n        label: t('status of count'),\r\n        data: [...dashboardSummary?.map((i) => i.count)],\r\n        backgroundColor: ['#82d616', '#21bf73', '#ea0606', '#17c1e8'],\r\n        borderColor: ['#82d616', '#21bf73', '#ea0606', '#17c1e8'],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n  return <Pie data={data} />;\r\n};\r\n\r\nexport default StatusChart;\r\n","//External lib imports\nimport React from 'react';\n\n//Internal lib imports\nimport Layout from '../../layout/Layout';\nimport { useDashboardSummaryQuery } from '../../redux/services/dashboardService';\nimport { Card, Col, Container, Row, Spinner } from 'react-bootstrap';\nimport { AiOutlineCalendar, AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\nimport { useTranslation } from 'react-i18next';\nimport StatusChart from '../../components/StatusChart';\n\nconst Dashboard = () => {\n  const { data, isLoading } = useDashboardSummaryQuery();\n  const { t } = useTranslation();\n\n  const dashboardSummary = data?.data || [];\n\n  let content = '';\n\n  if (isLoading) {\n    content = (\n      <Card>\n        <Card.Body>\n          <Col sm={4}>\n            <Spinner size=\"lg\" variant=\"primary\" />\n          </Col>\n        </Card.Body>\n      </Card>\n    );\n  } else if (dashboardSummary && dashboardSummary.length > 0) {\n    content = (\n      <>\n        <Card>\n          <Card.Body>\n            <Col sm={4}>\n              <StatusChart dashboardSummary={dashboardSummary} />\n            </Col>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  } else {\n    content = (\n      <Card>\n        <Card.Body>\n          <Col sm={4}>\n            <StatusChart\n              dashboardSummary={[\n                {\n                  _id: 'complete',\n                  count: 0,\n                },\n                {\n                  _id: 'pending',\n                  count: 0,\n                },\n                {\n                  _id: 'canceled',\n                  count: 0,\n                },\n                {\n                  _id: 'new',\n                  count: 0,\n                },\n              ]}\n            />\n          </Col>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <Row>{content}</Row>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Dashboard;\n"],"names":["dashboardService","apiService","endpoints","builder","dashboardSummary","query","url","method","useDashboardSummaryQuery","useLazyDashboardSummaryQuery","ChartJS","ArcElement","Tooltip","Legend","_ref","t","useTranslation","data","labels","_toConsumableArray","map","i","_id","datasets","label","count","backgroundColor","borderColor","borderWidth","_jsx","Pie","_useDashboardSummaryQ","isLoading","content","Card","children","Col","sm","Spinner","size","variant","length","_Fragment","StatusChart","Layout","Container","Row"],"sourceRoot":""}